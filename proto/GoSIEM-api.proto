syntax = "proto3";

package auth;
option go_package = "github.com/imyazip/GoSIEM-proto;main";
import "google/protobuf/timestamp.proto";

// Сервис авторизации
service AuthService {
    // API для сенсоров
    rpc ValidateJWTForSensor (ValidateJWTForSensorRequest) returns (ValidateJWTForSensorResponse);
    rpc GenerateJWTForSensor (GenerateJWTForSensorRequest) returns (GenerateJWTForSensorResponse); // Реализовано

    // API для пользователей
    rpc Login (LoginRequest) returns (LoginResponse); // Реализовано
    rpc ValidateJWTUser (ValidateJWTUserRequest) returns (ValidateJWTUserResponse); 

    // Управление пользователями
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse); // Реализовано
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);

    // Управление ролями
    rpc GetUserRole (GetUserRoleRequest) returns (GetUserRoleResponse);
    rpc SetUserRole (SetUserRoleRequest) returns (SetUserRoleResponse);

    // Управление API-ключами
    rpc GenerateAPIKey (GenerateAPIKeyRequest) returns (GenerateAPIKeyResponse);
    rpc RevokeAPIKey (RevokeAPIKeyRequest) returns (RevokeAPIKeyResponse);
}

service LogStorageService {
    rpc TransferRawStringLog (TransferRawStringLogRequest) returns (TransferRawStringLogResponse);
    rpc TranserSerializedLog (TranserSerializedLogRequest) returns (TranserSerializedLogResponse);
}

/////////////////////////
// Запросы и ответы
/////////////////////////

// Запрос для проверки API-ключа
message ValidateJWTForSensorRequest {
    string JWT = 1;
}

// Ответ для проверки API-ключа
message ValidateJWTForSensorResponse {
    bool valid = 1;
}

// Запрос на получение JWT токена для сенсора
message GenerateJWTForSensorRequest { // Реализовано
    string api_key = 1;  // API-ключ сенсора
    string sensor_id = 2; // Уникальный sensor id
    string name = 3;
    string hostname = 4;
    string os_version = 5;
    string sensor_type = 6;
    string agent_version = 7;
}

// Ответ на запрос генерации JWT токена
message GenerateJWTForSensorResponse {
    string token = 1;  // JWT токен
}

// Запрос на аутентификацию пользователя
message LoginRequest {
    string username = 1;
    string password = 2;
}

// Ответ на аутентификацию пользователя
message LoginResponse {
    string token = 1; // JWT токен
}

// Запрос проверки валидности JWT токена
message ValidateJWTUserRequest {
    string token = 1;
}

// Ответ проверки валидности JWT токена
message ValidateJWTUserResponse {
    bool valid = 1;
    int64 user_id = 2;
    string role = 3;    // Роль пользователя
}

/////////////////////////
// Управление пользователями
/////////////////////////

// Запрос на создание пользователя
message CreateUserRequest {
    string username = 1;
    string password = 2;
    int64 role = 3; // Роль нового пользователя ("admin", "analyst", "viewer")
}

// Ответ на создание пользователя
message CreateUserResponse {
    bool success = 1;
}

// Запрос на удаление пользователя
message DeleteUserRequest {
    string username = 1;
}

// Ответ на удаление пользователя
message DeleteUserResponse {
    bool success = 1;
}

/////////////////////////
// Управление ролями
/////////////////////////

// Запрос на получение роли пользователя
message GetUserRoleRequest {
    string username = 1;
}

// Ответ на получение роли пользователя
message GetUserRoleResponse {
    string role = 1;
}

// Запрос на изменение роли пользователя
message SetUserRoleRequest {
    string username = 1;
    string role = 2; // Новая роль ("admin", "analyst", "viewer")
}

// Ответ на изменение роли пользователя
message SetUserRoleResponse {
    bool success = 1;
}

/////////////////////////
// Управление API-ключами
/////////////////////////

// Запрос на генерацию нового API-ключа
message GenerateAPIKeyRequest {
    string description = 1; // Описание сенсора
}

// Ответ на генерацию нового API-ключа
message GenerateAPIKeyResponse {
    string api_key = 1; // Новый API-ключ
}

// Запрос на отзыв API-ключа
message RevokeAPIKeyRequest {
    string api_key = 1;
}

// Ответ на отзыв API-ключа
message RevokeAPIKeyResponse {
    bool success = 1;
}

message TransferRawStringLogRequest {
    string log_source = 1;
    string log_string = 2;
    google.protobuf.Timestamp system_created_at = 3;
    string sensor_id = 4;
}

message TransferRawStringLogResponse {
    bool success = 1;
    string error = 2;
}

message TranserSerializedLogRequest {
    string log_source = 1;
    repeated string  log_serialized = 2;
    google.protobuf.Timestamp system_created_at = 3;
    string sensor_id = 4;
}

message TranserSerializedLogResponse {
    bool success = 1;
    string error = 2;
}